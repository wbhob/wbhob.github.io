{"dependencies":[{"name":"./routerWarning","loc":{"line":1,"column":20}},{"name":"react","loc":{"line":2,"column":18}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _routerWarning = require(\"./routerWarning\");\n\nvar _routerWarning2 = _interopRequireDefault(_routerWarning);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar object = _react2.default.PropTypes.object;\n\n/**\n * The RouteContext mixin provides a convenient way for route\n * components to set the route in context. This is needed for\n * routes that render elements that want to use the Lifecycle\n * mixin to prevent transitions.\n */\n\nvar RouteContext = {\n\n  propTypes: {\n    route: object.isRequired\n  },\n\n  childContextTypes: {\n    route: object.isRequired\n  },\n\n  getChildContext: function getChildContext() {\n    return {\n      route: this.props.route\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    \"development\" !== 'production' ? (0, _routerWarning2.default)(false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : void 0;\n  }\n};\n\nexports.default = RouteContext;"},"hash":"9bf988802e2ebef2f68a964f4700bfd2"}