{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** Virtual DOM Node */\nfunction VNode() {}\n\n/** Global options\n *\t@public\n *\t@namespace options {Object}\n */\nvar options = {\n\n  /** If `true`, `prop` changes trigger synchronous component updates.\n   *\t@name syncComponentUpdates\n   *\t@type Boolean\n   *\t@default true\n   */\n  //syncComponentUpdates: true,\n\n  /** Processes all created VNodes.\n   *\t@param {VNode} vnode\tA newly-created VNode to normalize/process\n   */\n  //vnode(vnode) { }\n\n  /** Hook invoked after a component is mounted. */\n  // afterMount(component) { }\n\n  /** Hook invoked after the DOM is updated with a component's latest render. */\n  // afterUpdate(component) { }\n\n  /** Hook invoked immediately before a component is unmounted. */\n  // beforeUnmount(component) { }\n};\n\nvar stack = [];\n\nvar EMPTY_CHILDREN = [];\n\n/**\n * JSX/hyperscript reviver.\n * @see http://jasonformat.com/wtf-is-jsx\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\n * Note: this is exported as both `h()` and `createElement()` for compatibility reasons.\n *\n * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a lightweight representation\n * of the structure of a DOM tree. This structure can be realized by recursively comparing it against\n * the current _actual_ DOM structure, and applying only the differences.\n *\n * `h()`/`createElement()` accepts an element name, a list of attributes/props,\n * and optionally children to append to the element.\n *\n * @example The following DOM tree\n *\n * `<div id=\"foo\" name=\"bar\">Hello!</div>`\n *\n * can be constructed using this function as:\n *\n * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`\n *\n * @param {string} nodeName\tAn element name. Ex: `div`, `a`, `span`, etc.\n * @param {Object} attributes\tAny attributes/props to set on the created element.\n * @param rest\t\t\tAdditional arguments are taken to be children to append. Can be infinitely nested Arrays.\n *\n * @public\n */\nfunction h(nodeName, attributes) {\n  var children = EMPTY_CHILDREN,\n      lastSimple,\n      child,\n      simple,\n      i;\n  for (i = arguments.length; i-- > 2;) {\n    stack.push(arguments[i]);\n  }\n  if (attributes && attributes.children != null) {\n    if (!stack.length) stack.push(attributes.children);\n    delete attributes.children;\n  }\n  while (stack.length) {\n    if ((child = stack.pop()) && child.pop !== undefined) {\n      for (i = child.length; i--;) {\n        stack.push(child[i]);\n      }\n    } else {\n      if (typeof child === 'boolean') child = null;\n\n      if (simple = typeof nodeName !== 'function') {\n        if (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;\n      }\n\n      if (simple && lastSimple) {\n        children[children.length - 1] += child;\n      } else if (children === EMPTY_CHILDREN) {\n        children = [child];\n      } else {\n        children.push(child);\n      }\n\n      lastSimple = simple;\n    }\n  }\n\n  var p = new VNode();\n  p.nodeName = nodeName;\n  p.children = children;\n  p.attributes = attributes == null ? undefined : attributes;\n  p.key = attributes == null ? undefined : attributes.key;\n\n  // if a \"vnode hook\" is defined, pass every created VNode to it\n  if (options.vnode !== undefined) options.vnode(p);\n\n  return p;\n}\n\n/**\n *  Copy all properties from `props` onto `obj`.\n *  @param {Object} obj\t\tObject onto which properties should be copied.\n *  @param {Object} props\tObject from which to copy properties.\n *  @returns obj\n *  @private\n */\nfunction extend(obj, props) {\n  for (var i in props) {\n    obj[i] = props[i];\n  }return obj;\n}\n\n/**\n * Call a function asynchronously, as soon as possible. Makes\n * use of HTML Promise to schedule the callback if available,\n * otherwise falling back to `setTimeout` (mainly for IE<11).\n *\n * @param {Function} callback\n */\nvar defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {VNode} vnode\t\tThe virutal DOM element to clone\n * @param {Object} props\tAttributes/props to add when cloning\n * @param {VNode} rest\t\tAny additional arguments will be used as replacement children.\n */\nfunction cloneElement(vnode, props) {\n  return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);\n}\n\n// DOM properties that should NOT have \"px\" added when numeric\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\n/** Managed queue of dirty components to be re-rendered */\n\nvar items = [];\n\nfunction enqueueRender(component) {\n  if (!component._dirty && (component._dirty = true) && items.push(component) == 1) {\n    (options.debounceRendering || defer)(rerender);\n  }\n}\n\nfunction rerender() {\n  var p,\n      list = items;\n  items = [];\n  while (p = list.pop()) {\n    if (p._dirty) renderComponent(p);\n  }\n}\n\n/**\n * Check if two nodes are equivalent.\n *\n * @param {Node} node\t\t\tDOM Node to compare\n * @param {VNode} vnode\t\t\tVirtual DOM node to compare\n * @param {boolean} [hyrdating=false]\tIf true, ignores component constructors when comparing.\n * @private\n */\nfunction isSameNodeType(node, vnode, hydrating) {\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\n    return node.splitText !== undefined;\n  }\n  if (typeof vnode.nodeName === 'string') {\n    return !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n  }\n  return hydrating || node._componentConstructor === vnode.nodeName;\n}\n\n/**\n * Check if an Element has a given nodeName, case-insensitively.\n *\n * @param {Element} node\tA DOM Element to inspect the name of.\n * @param {String} nodeName\tUnnormalized name to compare against.\n */\nfunction isNamedNode(node, nodeName) {\n  return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();\n}\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n *\n * @param {VNode} vnode\n * @returns {Object} props\n */\nfunction getNodeProps(vnode) {\n  var props = extend({}, vnode.attributes);\n  props.children = vnode.children;\n\n  var defaultProps = vnode.nodeName.defaultProps;\n  if (defaultProps !== undefined) {\n    for (var i in defaultProps) {\n      if (props[i] === undefined) {\n        props[i] = defaultProps[i];\n      }\n    }\n  }\n\n  return props;\n}\n\n/** Create an element with the given nodeName.\n *\t@param {String} nodeName\n *\t@param {Boolean} [isSvg=false]\tIf `true`, creates an element within the SVG namespace.\n *\t@returns {Element} node\n */\nfunction createNode(nodeName, isSvg) {\n  var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n  node.normalizedNodeName = nodeName;\n  return node;\n}\n\n/** Remove a child node from its parent if attached.\n *\t@param {Element} node\t\tThe node to remove\n */\nfunction removeNode(node) {\n  var parentNode = node.parentNode;\n  if (parentNode) parentNode.removeChild(node);\n}\n\n/** Set a named attribute on the given Node, with special behavior for some names and event handlers.\n *\tIf `value` is `null`, the attribute/handler will be removed.\n *\t@param {Element} node\tAn element to mutate\n *\t@param {string} name\tThe name/key to set, such as an event or attribute name\n *\t@param {any} old\tThe last value that was set for this name/node pair\n *\t@param {any} value\tAn attribute value, such as a function to be used as an event handler\n *\t@param {Boolean} isSvg\tAre we currently diffing inside an svg?\n *\t@private\n */\nfunction setAccessor(node, name, old, value, isSvg) {\n  if (name === 'className') name = 'class';\n\n  if (name === 'key') {\n    // ignore\n  } else if (name === 'ref') {\n    if (old) old(null);\n    if (value) value(node);\n  } else if (name === 'class' && !isSvg) {\n    node.className = value || '';\n  } else if (name === 'style') {\n    if (!value || typeof value === 'string' || typeof old === 'string') {\n      node.style.cssText = value || '';\n    }\n    if (value && (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === 'object') {\n      if (typeof old !== 'string') {\n        for (var i in old) {\n          if (!(i in value)) node.style[i] = '';\n        }\n      }\n      for (var i in value) {\n        node.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];\n      }\n    }\n  } else if (name === 'dangerouslySetInnerHTML') {\n    if (value) node.innerHTML = value.__html || '';\n  } else if (name[0] == 'o' && name[1] == 'n') {\n    var useCapture = name !== (name = name.replace(/Capture$/, ''));\n    name = name.toLowerCase().substring(2);\n    if (value) {\n      if (!old) node.addEventListener(name, eventProxy, useCapture);\n    } else {\n      node.removeEventListener(name, eventProxy, useCapture);\n    }\n    (node._listeners || (node._listeners = {}))[name] = value;\n  } else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {\n    setProperty(node, name, value == null ? '' : value);\n    if (value == null || value === false) node.removeAttribute(name);\n  } else {\n    var ns = isSvg && name !== (name = name.replace(/^xlink\\:?/, ''));\n    if (value == null || value === false) {\n      if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);\n    } else if (typeof value !== 'function') {\n      if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);\n    }\n  }\n}\n\n/** Attempt to set a DOM property to the given value.\n *\tIE & FF throw for certain property-value combinations.\n */\nfunction setProperty(node, name, value) {\n  try {\n    node[name] = value;\n  } catch (e) {}\n}\n\n/** Proxy an event to hooked event handlers\n *\t@private\n */\nfunction eventProxy(e) {\n  return this._listeners[e.type](options.event && options.event(e) || e);\n}\n\n/** Queue of components that have been mounted and are awaiting componentDidMount */\nvar mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nvar diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nvar isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nvar hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nfunction flushMounts() {\n  var c;\n  while (c = mounts.pop()) {\n    if (options.afterMount) options.afterMount(c);\n    if (c.componentDidMount) c.componentDidMount();\n  }\n}\n\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\n *\t@returns {Element} dom\t\t\tThe created/mutated element\n *\t@private\n */\nfunction diff(dom, vnode, context, mountAll, parent, componentRoot) {\n  // diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n  if (!diffLevel++) {\n    // when first starting the diff, check if we're diffing an SVG or within an SVG\n    isSvgMode = parent != null && parent.ownerSVGElement !== undefined;\n\n    // hydration is indicated by the existing element to be diffed not having a prop cache\n    hydrating = dom != null && !('__preactattr_' in dom);\n  }\n\n  var ret = idiff(dom, vnode, context, mountAll, componentRoot);\n\n  // append the element if its a new parent\n  if (parent && ret.parentNode !== parent) parent.appendChild(ret);\n\n  // diffLevel being reduced to 0 means we're exiting the diff\n  if (! --diffLevel) {\n    hydrating = false;\n    // invoke queued componentDidMount lifecycle methods\n    if (!componentRoot) flushMounts();\n  }\n\n  return ret;\n}\n\n/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n  var out = dom,\n      prevSvgMode = isSvgMode;\n\n  // empty values (null, undefined, booleans) render as empty Text nodes\n  if (vnode == null || typeof vnode === 'boolean') vnode = '';\n\n  // Fast case: Strings & Numbers create/update Text nodes.\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\n\n    // update if it's already a Text node:\n    if (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {\n      /* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\n      if (dom.nodeValue != vnode) {\n        dom.nodeValue = vnode;\n      }\n    } else {\n      // it wasn't a Text node: replace it with one and recycle the old Element\n      out = document.createTextNode(vnode);\n      if (dom) {\n        if (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n        recollectNodeTree(dom, true);\n      }\n    }\n\n    out['__preactattr_'] = true;\n\n    return out;\n  }\n\n  // If the VNode represents a Component, perform a component diff:\n  var vnodeName = vnode.nodeName;\n  if (typeof vnodeName === 'function') {\n    return buildComponentFromVNode(dom, vnode, context, mountAll);\n  }\n\n  // Tracks entering and exiting SVG namespace when descending through the tree.\n  isSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode;\n\n  // If there's no existing element or it's the wrong type, create a new one:\n  vnodeName = String(vnodeName);\n  if (!dom || !isNamedNode(dom, vnodeName)) {\n    out = createNode(vnodeName, isSvgMode);\n\n    if (dom) {\n      // move children into the replacement node\n      while (dom.firstChild) {\n        out.appendChild(dom.firstChild);\n      } // if the previous Element was mounted into the DOM, replace it inline\n      if (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n      // recycle the old element (skips non-Element node types)\n      recollectNodeTree(dom, true);\n    }\n  }\n\n  var fc = out.firstChild,\n      props = out['__preactattr_'],\n      vchildren = vnode.children;\n\n  if (props == null) {\n    props = out['__preactattr_'] = {};\n    for (var a = out.attributes, i = a.length; i--;) {\n      props[a[i].name] = a[i].value;\n    }\n  }\n\n  // Optimization: fast-path for elements containing a single TextNode:\n  if (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {\n    if (fc.nodeValue != vchildren[0]) {\n      fc.nodeValue = vchildren[0];\n    }\n  }\n  // otherwise, if there are existing or new children, diff them:\n  else if (vchildren && vchildren.length || fc != null) {\n      innerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);\n    }\n\n  // Apply attributes/props from VNode to the DOM Element:\n  diffAttributes(out, vnode.attributes, props);\n\n  // restore previous SVG mode: (in case we're exiting an SVG namespace)\n  isSvgMode = prevSvgMode;\n\n  return out;\n}\n\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n *\t@param {Element} dom\t\t\tElement whose children should be compared & mutated\n *\t@param {Array} vchildren\t\tArray of VNodes to compare to `dom.childNodes`\n *\t@param {Object} context\t\t\tImplicitly descendant context object (from most recent `getChildContext()`)\n *\t@param {Boolean} mountAll\n *\t@param {Boolean} isHydrating\tIf `true`, consumes externally created elements similar to hydration\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n  var originalChildren = dom.childNodes,\n      children = [],\n      keyed = {},\n      keyedLen = 0,\n      min = 0,\n      len = originalChildren.length,\n      childrenLen = 0,\n      vlen = vchildren ? vchildren.length : 0,\n      j,\n      c,\n      f,\n      vchild,\n      child;\n\n  // Build up a map of keyed children and an Array of unkeyed children:\n  if (len !== 0) {\n    for (var i = 0; i < len; i++) {\n      var _child = originalChildren[i],\n          props = _child['__preactattr_'],\n          key = vlen && props ? _child._component ? _child._component.__key : props.key : null;\n      if (key != null) {\n        keyedLen++;\n        keyed[key] = _child;\n      } else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {\n        children[childrenLen++] = _child;\n      }\n    }\n  }\n\n  if (vlen !== 0) {\n    for (var i = 0; i < vlen; i++) {\n      vchild = vchildren[i];\n      child = null;\n\n      // attempt to find a node based on key matching\n      var key = vchild.key;\n      if (key != null) {\n        if (keyedLen && keyed[key] !== undefined) {\n          child = keyed[key];\n          keyed[key] = undefined;\n          keyedLen--;\n        }\n      }\n      // attempt to pluck a node of the same type from the existing children\n      else if (!child && min < childrenLen) {\n          for (j = min; j < childrenLen; j++) {\n            if (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n              child = c;\n              children[j] = undefined;\n              if (j === childrenLen - 1) childrenLen--;\n              if (j === min) min++;\n              break;\n            }\n          }\n        }\n\n      // morph the matched/found/created DOM child to match vchild (deep)\n      child = idiff(child, vchild, context, mountAll);\n\n      f = originalChildren[i];\n      if (child && child !== dom && child !== f) {\n        if (f == null) {\n          dom.appendChild(child);\n        } else if (child === f.nextSibling) {\n          removeNode(f);\n        } else {\n          dom.insertBefore(child, f);\n        }\n      }\n    }\n  }\n\n  // remove unused keyed children:\n  if (keyedLen) {\n    for (var i in keyed) {\n      if (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);\n    }\n  }\n\n  // remove orphaned unkeyed children:\n  while (min <= childrenLen) {\n    if ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);\n  }\n}\n\n/** Recursively recycle (or just unmount) a node and its descendants.\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\n */\nfunction recollectNodeTree(node, unmountOnly) {\n  var component = node._component;\n  if (component) {\n    // if node is owned by a Component, unmount that component (ends up recursing back here)\n    unmountComponent(component);\n  } else {\n    // If the node's VNode had a ref function, invoke it with null here.\n    // (this is part of the React spec, and smart for unsetting references)\n    if (node['__preactattr_'] != null && node['__preactattr_'].ref) node['__preactattr_'].ref(null);\n\n    if (unmountOnly === false || node['__preactattr_'] == null) {\n      removeNode(node);\n    }\n\n    removeChildren(node);\n  }\n}\n\n/** Recollect/unmount all children.\n *\t- we use .lastChild here because it causes less reflow than .firstChild\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\n */\nfunction removeChildren(node) {\n  node = node.lastChild;\n  while (node) {\n    var next = node.previousSibling;\n    recollectNodeTree(node, true);\n    node = next;\n  }\n}\n\n/** Apply differences in attributes from a VNode to the given DOM Element.\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old) {\n  var name;\n\n  // remove attributes no longer present on the vnode by setting them to undefined\n  for (name in old) {\n    if (!(attrs && attrs[name] != null) && old[name] != null) {\n      setAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n    }\n  }\n\n  // add new & update changed attributes\n  for (name in attrs) {\n    if (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {\n      setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n    }\n  }\n}\n\n/** Retains a pool of Components for re-use, keyed on component name.\n *\tNote: since component names are not unique or even necessarily available, these are primarily a form of sharding.\n *\t@private\n */\nvar components = {};\n\n/** Reclaim a component for later re-use by the recycler. */\nfunction collectComponent(component) {\n  var name = component.constructor.name;\n  (components[name] || (components[name] = [])).push(component);\n}\n\n/** Create a component. Normalizes differences between PFC's and classful Components. */\nfunction createComponent(Ctor, props, context) {\n  var list = components[Ctor.name],\n      inst;\n\n  if (Ctor.prototype && Ctor.prototype.render) {\n    inst = new Ctor(props, context);\n    Component.call(inst, props, context);\n  } else {\n    inst = new Component(props, context);\n    inst.constructor = Ctor;\n    inst.render = doRender;\n  }\n\n  if (list) {\n    for (var i = list.length; i--;) {\n      if (list[i].constructor === Ctor) {\n        inst.nextBase = list[i].nextBase;\n        list.splice(i, 1);\n        break;\n      }\n    }\n  }\n  return inst;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n  return this.constructor(props, context);\n}\n\n/** Set a component's `props` (generally derived from JSX attributes).\n *\t@param {Object} props\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.renderSync=false]\tIf `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.\n *\t@param {boolean} [opts.render=true]\t\t\tIf `false`, no render will be triggered.\n */\nfunction setComponentProps(component, props, opts, context, mountAll) {\n  if (component._disable) return;\n  component._disable = true;\n\n  if (component.__ref = props.ref) delete props.ref;\n  if (component.__key = props.key) delete props.key;\n\n  if (!component.base || mountAll) {\n    if (component.componentWillMount) component.componentWillMount();\n  } else if (component.componentWillReceiveProps) {\n    component.componentWillReceiveProps(props, context);\n  }\n\n  if (context && context !== component.context) {\n    if (!component.prevContext) component.prevContext = component.context;\n    component.context = context;\n  }\n\n  if (!component.prevProps) component.prevProps = component.props;\n  component.props = props;\n\n  component._disable = false;\n\n  if (opts !== 0) {\n    if (opts === 1 || options.syncComponentUpdates !== false || !component.base) {\n      renderComponent(component, 1, mountAll);\n    } else {\n      enqueueRender(component);\n    }\n  }\n\n  if (component.__ref) component.__ref(component);\n}\n\n/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.\n *\t@param {Component} component\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.build=false]\t\tIf `true`, component will build and store a DOM node if not already associated with one.\n *\t@private\n */\nfunction renderComponent(component, opts, mountAll, isChild) {\n  if (component._disable) return;\n\n  var props = component.props,\n      state = component.state,\n      context = component.context,\n      previousProps = component.prevProps || props,\n      previousState = component.prevState || state,\n      previousContext = component.prevContext || context,\n      isUpdate = component.base,\n      nextBase = component.nextBase,\n      initialBase = isUpdate || nextBase,\n      initialChildComponent = component._component,\n      skip = false,\n      rendered,\n      inst,\n      cbase;\n\n  // if updating\n  if (isUpdate) {\n    component.props = previousProps;\n    component.state = previousState;\n    component.context = previousContext;\n    if (opts !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {\n      skip = true;\n    } else if (component.componentWillUpdate) {\n      component.componentWillUpdate(props, state, context);\n    }\n    component.props = props;\n    component.state = state;\n    component.context = context;\n  }\n\n  component.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n  component._dirty = false;\n\n  if (!skip) {\n    rendered = component.render(props, state, context);\n\n    // context to pass to the child, can be updated via (grand-)parent component\n    if (component.getChildContext) {\n      context = extend(extend({}, context), component.getChildContext());\n    }\n\n    var childComponent = rendered && rendered.nodeName,\n        toUnmount,\n        base;\n\n    if (typeof childComponent === 'function') {\n      // set up high order component link\n\n      var childProps = getNodeProps(rendered);\n      inst = initialChildComponent;\n\n      if (inst && inst.constructor === childComponent && childProps.key == inst.__key) {\n        setComponentProps(inst, childProps, 1, context, false);\n      } else {\n        toUnmount = inst;\n\n        component._component = inst = createComponent(childComponent, childProps, context);\n        inst.nextBase = inst.nextBase || nextBase;\n        inst._parentComponent = component;\n        setComponentProps(inst, childProps, 0, context, false);\n        renderComponent(inst, 1, mountAll, true);\n      }\n\n      base = inst.base;\n    } else {\n      cbase = initialBase;\n\n      // destroy high order component link\n      toUnmount = initialChildComponent;\n      if (toUnmount) {\n        cbase = component._component = null;\n      }\n\n      if (initialBase || opts === 1) {\n        if (cbase) cbase._component = null;\n        base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n      }\n    }\n\n    if (initialBase && base !== initialBase && inst !== initialChildComponent) {\n      var baseParent = initialBase.parentNode;\n      if (baseParent && base !== baseParent) {\n        baseParent.replaceChild(base, initialBase);\n\n        if (!toUnmount) {\n          initialBase._component = null;\n          recollectNodeTree(initialBase, false);\n        }\n      }\n    }\n\n    if (toUnmount) {\n      unmountComponent(toUnmount);\n    }\n\n    component.base = base;\n    if (base && !isChild) {\n      var componentRef = component,\n          t = component;\n      while (t = t._parentComponent) {\n        (componentRef = t).base = base;\n      }\n      base._component = componentRef;\n      base._componentConstructor = componentRef.constructor;\n    }\n  }\n\n  if (!isUpdate || mountAll) {\n    mounts.unshift(component);\n  } else if (!skip) {\n    // Ensure that pending componentDidMount() hooks of child components\n    // are called before the componentDidUpdate() hook in the parent.\n    // Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750\n    // flushMounts();\n\n    if (component.componentDidUpdate) {\n      component.componentDidUpdate(previousProps, previousState, previousContext);\n    }\n    if (options.afterUpdate) options.afterUpdate(component);\n  }\n\n  if (component._renderCallbacks != null) {\n    while (component._renderCallbacks.length) {\n      component._renderCallbacks.pop().call(component);\n    }\n  }\n\n  if (!diffLevel && !isChild) flushMounts();\n}\n\n/** Apply the Component referenced by a VNode to the DOM.\n *\t@param {Element} dom\tThe DOM node to mutate\n *\t@param {VNode} vnode\tA Component-referencing VNode\n *\t@returns {Element} dom\tThe created/mutated element\n *\t@private\n */\nfunction buildComponentFromVNode(dom, vnode, context, mountAll) {\n  var c = dom && dom._component,\n      originalComponent = c,\n      oldDom = dom,\n      isDirectOwner = c && dom._componentConstructor === vnode.nodeName,\n      isOwner = isDirectOwner,\n      props = getNodeProps(vnode);\n  while (c && !isOwner && (c = c._parentComponent)) {\n    isOwner = c.constructor === vnode.nodeName;\n  }\n\n  if (c && isOwner && (!mountAll || c._component)) {\n    setComponentProps(c, props, 3, context, mountAll);\n    dom = c.base;\n  } else {\n    if (originalComponent && !isDirectOwner) {\n      unmountComponent(originalComponent);\n      dom = oldDom = null;\n    }\n\n    c = createComponent(vnode.nodeName, props, context);\n    if (dom && !c.nextBase) {\n      c.nextBase = dom;\n      // passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:\n      oldDom = null;\n    }\n    setComponentProps(c, props, 1, context, mountAll);\n    dom = c.base;\n\n    if (oldDom && dom !== oldDom) {\n      oldDom._component = null;\n      recollectNodeTree(oldDom, false);\n    }\n  }\n\n  return dom;\n}\n\n/** Remove a component from the DOM and recycle it.\n *\t@param {Component} component\tThe Component instance to unmount\n *\t@private\n */\nfunction unmountComponent(component) {\n  if (options.beforeUnmount) options.beforeUnmount(component);\n\n  var base = component.base;\n\n  component._disable = true;\n\n  if (component.componentWillUnmount) component.componentWillUnmount();\n\n  component.base = null;\n\n  // recursively tear down & recollect high-order component children:\n  var inner = component._component;\n  if (inner) {\n    unmountComponent(inner);\n  } else if (base) {\n    if (base['__preactattr_'] && base['__preactattr_'].ref) base['__preactattr_'].ref(null);\n\n    component.nextBase = base;\n\n    removeNode(base);\n    collectComponent(component);\n\n    removeChildren(base);\n  }\n\n  if (component.__ref) component.__ref(null);\n}\n\n/** Base Component class.\n *\tProvides `setState()` and `forceUpdate()`, which trigger rendering.\n *\t@public\n *\n *\t@example\n *\tclass MyFoo extends Component {\n *\t\trender(props, state) {\n *\t\t\treturn <div />;\n *\t\t}\n *\t}\n */\nfunction Component(props, context) {\n  this._dirty = true;\n\n  /** @public\n   *\t@type {object}\n   */\n  this.context = context;\n\n  /** @public\n   *\t@type {object}\n   */\n  this.props = props;\n\n  /** @public\n   *\t@type {object}\n   */\n  this.state = this.state || {};\n}\n\nextend(Component.prototype, {\n\n  /** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.\n   *\t@param {object} nextProps\n   *\t@param {object} nextState\n   *\t@param {object} nextContext\n   *\t@returns {Boolean} should the component re-render\n   *\t@name shouldComponentUpdate\n   *\t@function\n   */\n\n  /** Update component state by copying properties from `state` to `this.state`.\n   *\t@param {object} state\t\tA hash of state properties to update with new values\n   *\t@param {function} callback\tA function to be called once component state is updated\n   */\n  setState: function setState(state, callback) {\n    var s = this.state;\n    if (!this.prevState) this.prevState = extend({}, s);\n    extend(s, typeof state === 'function' ? state(s, this.props) : state);\n    if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);\n    enqueueRender(this);\n  },\n\n  /** Immediately perform a synchronous re-render of the component.\n   *\t@param {function} callback\t\tA function to be called after component is re-rendered.\n   *\t@private\n   */\n  forceUpdate: function forceUpdate(callback) {\n    if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);\n    renderComponent(this, 2);\n  },\n\n  /** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n   *\tVirtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n   *\t@param {object} props\t\tProps (eg: JSX attributes) received from parent element/component\n   *\t@param {object} state\t\tThe component's current state\n   *\t@param {object} context\t\tContext object (if a parent component has provided context)\n   *\t@returns VNode\n   */\n  render: function render() {}\n});\n\n/** Render JSX into a `parent` Element.\n *\t@param {VNode} vnode\t\tA (JSX) VNode to render\n *\t@param {Element} parent\t\tDOM element to render into\n *\t@param {Element} [merge]\tAttempt to re-use an existing DOM tree rooted at `merge`\n *\t@public\n *\n *\t@example\n *\t// render a div into <body>:\n *\trender(<div id=\"hello\">hello!</div>, document.body);\n *\n *\t@example\n *\t// render a \"Thing\" component into #foo:\n *\tconst Thing = ({ name }) => <span>{ name }</span>;\n *\trender(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nfunction render(vnode, parent, merge) {\n  return diff(merge, vnode, {}, false, parent, false);\n}\n\nvar preact = {\n  h: h,\n  createElement: h,\n  cloneElement: cloneElement,\n  Component: Component,\n  render: render,\n  rerender: rerender,\n  options: options\n};\n\nexports.h = h;\nexports.createElement = h;\nexports.cloneElement = cloneElement;\nexports.Component = Component;\nexports.render = render;\nexports.rerender = rerender;\nexports.options = options;\nexports.default = preact;\n//# sourceMappingURL=preact.esm.js.map"},"hash":"bc2433b0069874231700a5813b44d5e1"}